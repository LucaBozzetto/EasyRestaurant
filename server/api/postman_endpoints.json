{
	"info": {
		"_postman_id": "348f7edf-63f0-4cd8-9865-9be51eb3dc5e",
		"name": "EasyRestaurant",
		"description": "EasyRestaurant provides a set of easy APIs to manage a restaurant.\nEvery user can be assigned a specific role and accordingly to this an user may or may not access to different functionalities.\nThe APIs also emit various Socket.io events that you might want to listen for in your frontend application.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"johndoe\",\n\t\"password\": \"secret\",\n\t\"name\": \"John\",\n\t\"surname\": \"Doe\",\n\t\"role\": \"waiter\"\n}"
						},
						"url": {
							"raw": "api/register",
							"host": [
								"api"
							],
							"path": [
								"register"
							]
						},
						"description": "## Description\nRegisters a new user and returns a JWT token.\n\n### Parameters\nAll parameters exception made for `wage` are mandatory.\n* __username:__ The username that will be used to access the system and uniquely identify the user. The length must be within 1 and 50 characters.\n* __password:__ The password to be used for next logins. The length must be within 6 and 150 characters.\n* __name:__ The name of the user.\n* __surname:__ The last name of the user.\n* __role:__ The role of the user in the restaurant. This can only be one of the three following values:\n\n   1. `waiter`\n   2. `bar`\n   3. `cook`\n* __wage:__ I know this should be only provided by admins but we are not going to pay anyone so... :)\n\n\n### Response\nThe JSON response will have one field:\n1. __token__ - The JWT to be included in the next requests. \n\n\n### Socket.io Events\nThis endpoint emits the following event:\n* __user-authenticated__ - *Broadcasted* - Sent when an user signs in or up. The user's id and role are passed along in the data field.\n* * __user-signed-up - *Broadcasted to the cashiers room* - Sent when an user signs up. The user's username is passed along in the data field.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid username:__ The username provided is already taken or it's not valid. Username's length have to be between 1 and 50 characters.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The username is already taken or invalid.\"`\n* __Password too short:__ The password provided is too short. Passwords need to have 6 characters or more.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Password too short.\"`\n* __Password too long:__ The password provided is too long. Passwords need to have 150 characters or less.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Password too long.\"`\n* __Unexpected Role:__ The role provided is not valid. Please mind that the role is case sensitive and has to be one of the following: \"waiter\", \"bar\", \"cook\".\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The role you provided is not valid.\"`\n\n\n"
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"johndoe\",\n\t\"password\": \"secret\"\n}"
						},
						"url": {
							"raw": "api/login",
							"host": [
								"api"
							],
							"path": [
								"login"
							]
						},
						"description": "## Description\nLogin. I know the name of the endpoint is selfexplanatory!\n\n### Parameters\nThe following parameters must be passed:\n* __username:__ The username of the user you wish to log-in.\n* __password:__ The corresponding user's password.\n\n\n### Response\nThe JSON response will have one field:\n1. __token__ - The JWT to be included in the next requests. \n\n\n### Socket.io Events\nThis endpoint emits the following event:\n* __user-authenticated__ - *Broadcasted* - Sent when an user signs in or up. The user's id and role are passed along in the data field.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Wrong credentials:__ The username and/or password are not correct.\n   \n   `{\"statusCode\": 401, \"error\": true, \"message\": \"Authentication error.\"`\n   \n\n\n"
					},
					"response": []
				}
			],
			"description": "These endpoints are used to perform basic authorization operations.\nIf you receive an unauthorized error response after a request to other endpoints probably you haven't logged-in or provided the token with your request."
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Single user's data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/users/:username",
							"host": [
								"api"
							],
							"path": [
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "johndoe",
									"description": "Username of the user you wish to retrieve information about"
								}
							]
						},
						"description": "## Description\nRetrieve a user's personal information given its username. If a user tries to get another user's data he will simple get a response confirming the existence of a user with such a username. This is used to verify withouth being logged-in if a username is available or not.\nAn admin can retrieve all users info.\n\n\n### Response\nThe JSON response will have the following fields:\n1. __name:__ The name of the user.\n2. __surname__ The user's last name.\n3. __role:__ The role the user is assigned to.\n4. __hired:__ The date of the user's registration\n5. __wage:__ The user's wage.\n6. ___id:__ The database id of the user.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __User not found:__ The username provided is probably not valid or the user was deleted.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"User not found.\"`\n"
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"admin\": true\n}"
						},
						"url": {
							"raw": "api/users/:username",
							"host": [
								"api"
							],
							"path": [
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "johndoe",
									"description": "Username of the user you wish to retrieve information about"
								}
							]
						},
						"description": "## Description\nUpdates an user. At the moment this functionality is only used to set a user as admin but could be further expanded to accept other changes.\nOnly admins can call this endpoint\n\n\n### Response\nThe JSON response will have the following fields:\n1. __name:__ The name of the user.\n2. __surname__ The user's last name.\n3. __role:__ The role the user is assigned to.\n4. __hired:__ The date of the user's registration\n5. __wage:__ The user's wage.\n6. ___id:__ The database id of the user.\n\n\n### Socket.io Events\nThis endpoint emits the following event:\n* __user-promoted__ - *sent to the specific user's only* - The user's role has changed.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __User not found:__ The username provided is probably not valid or the user was deleted.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"User not found.\"`\n* __Admin already:__ The user provided is an admin already.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"This user is an admin already.\"`\n* __User assigned to a table:__ The user provided is assigned to a table as a waiter and can not be promoted at the moment.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"This user is currently assigned to a table as a waiter.\"`\n"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "api/users/:username",
							"host": [
								"api"
							],
							"path": [
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "johndoe",
									"description": "Username of the user you wish to retrieve information about"
								}
							]
						},
						"description": "## Description\nDeletes an user. If the user is a waiter and it's assigned to a table the operation fails.\nOnly admins can call this endpoint.\n\n\n### Response\nThe JSON response will have the following fields:\n1. __name:__ The name of the user.\n2. __surname__ The user's last name.\n3. __role:__ The role the user is assigned to.\n4. __hired:__ The date of the user's registration\n5. __wage:__ The user's wage.\n6. ___id:__ The database id of the user.\n\n### Socket.io Events\nThis endpoint emits the following event:\n* __user-deleted__ - *sent to the specific user's only* - The user has been deleted.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __User not found:__ The username provided is probably not valid or the user was deleted.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"User not found.\"`\n* __User assigned to a table:__ The user provided is assigned to a table as a waiter and can not be deleted at the moment.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The user you tried to dismiss is currently assigned to a table as a waiter.\"`\n"
					},
					"response": []
				},
				{
					"name": "List all users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/users",
							"host": [
								"api"
							],
							"path": [
								"users"
							]
						},
						"description": "## Description\nRetrieve a list of all users registered. This endpoint can only be called by users with admin privileges.\n\n\n### Response\nThe JSON response will be an array of users with the following fields:\n1. __name:__ The name of the user.\n2. __surname__ The user's last name.\n3. __role:__ The role the user is assigned to.\n4. __hired:__ The date of the user's registration\n5. __wage:__ The user's wage.\n6. ___id:__ The database's id of the user\n\n\n### Errors\nThe following errors might be returned:\n* __User not found:__ This means that there are no other users exception made for the one who has sent the request.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"User not found.\"`\n"
					},
					"response": []
				}
			],
			"description": "These endpoints are used to retrieve users specific information.\nOnly users with admin privileges may retrieve sensible data and update/delete users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "07c41881-7577-4039-8ea9-d6db4dcb0154",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e042f218-bc9c-485e-beda-0a531d411016",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "Items list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/items?type=extra&tag=pizza",
							"host": [
								"api"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "type",
									"value": "extra",
									"description": "The item type. This is usefull if you want to fetch only extra ingredients for example."
								},
								{
									"key": "tag",
									"value": "pizza",
									"description": "One of the tag that the items must contain (eg. Pizza)"
								}
							]
						},
						"description": "## Description\nFetches a list of all the items. Accept query filters based on the parameters tag and type.\n\n\n### Query\nThe results might be filtered using the following query parameters:\n1. __type:__ The item type. This is usefull if you want to fetch only extra ingredients for example.\n2. __tag:__ One of the tag that the items must contain (eg. Startes)\n\n\n### Response\nThe JSON response will be an array of objects with the following fields:\n1. __name:__ The name of the item.\n2. __price:__ The price of the item.\n3. __type:__ The type of the item. Can have one of the following three values:\n\n   1. `food`\n   2. `beverage`\n   3. `extra`\n \n4. __timeRequired__: The preparation time for the item. This has meaning only for items of type `food`.\n5. __tag:__ A tag for this item.\n6. ___id:__ The item id.\n\n\n### Errors\nThe following errors might be returned:\n* __Wrong Query:__ The query parameters were not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The query parameters are not valid.\"`"
					},
					"response": []
				},
				{
					"name": "Create new Item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Pizza a\",\n\t\"price\": 9,\n\t\"type\": \"food\",\n\t\"timeRequired\": 10,\n\t\"tag\": \"starter\"\n}"
						},
						"url": {
							"raw": "api/items",
							"host": [
								"api"
							],
							"path": [
								"items"
							]
						},
						"description": "## Description\nCreate a new item. Items are used to provide a menu list to the waiters and to mantain consistency between orders. \n\n\n### Parameters\nThe following parameters are accepted:\n* __name:__ The name of the item. Is **unique** so 2 items with the same name are not accepted.\n* __price:__ The price of the item.\n* __type:__ The type of the item. Must have one of the following three values:\n\n   1. `food`\n   2. `beverage`\n   3. `extra`\n \n* __timeRequired__: The preparation time for the item. This has meaning only for items of type `food`.\n* __tag:__ A tag for this item. Only one is accepted at the moment for simplicity.\n\n\n### Response\nThe JSON response will contain the newly created item in case of success. An _id property is going to be automatically added.\n\n\n### Socket.io Events\nThis endpoint emits the following event:\n* __item-added__ - *Broadcasted* - Sent when an item is created, the newly created item id is passed along.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Unexpected type:__ The type assigned to the item is not correct.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The type you provided is not valid.\"`\n   \n\n\n"
					},
					"response": []
				}
			],
			"description": "An item is basically a menu entry. Items are the only elements that can be ordered by customers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c41e2fee-0b32-4d3d-b7c7-e00069099a63",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ab9445e9-0178-4b11-8a92-e60441772291",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Orders list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/orders",
							"host": [
								"api"
							],
							"path": [
								"orders"
							]
						},
						"description": "## Description\nFetches a list of all the orders. Accept a query filter based on the parameter status.\n\n\n### Query\nThe results might be filtered using the following query parameter:\n1. __status:__ The status of the orders. Might be `preparation`, `beverageready`, `foodready`, `completed` or `checkedout`.\n2. __date:__ The date of the orders. It will returns all orders within the chosen date (time is excluded and automatically set to midnight) and the day after.\n\n### Response\nThe JSON response will be an array of objects with the following fields:\n1. __orderNumber:__ The order's number\n2. __status:__ The order's status.\n3. __submittedAt:__ The timestamp of when the order was created.\n4. __waiter__: The waiter that submitted the order.\n5. __table:__ The ID of the table where the order was placed.\n6. ___food:__ An array of elements of type `food`.\n7. ___beverage:__ An array of elements of type `beverage`.\n\n\n### Errors\nThe following errors might be returned:\n* __Wrong Query:__ The query parameters were not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The query parameters are not valid.\"`"
					},
					"response": []
				},
				{
					"name": "Single Order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/orders/:orderId",
							"host": [
								"api"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "",
									"description": "The id of the order you wish to fetch"
								}
							]
						},
						"description": "## Description\nFetches a single order using its ID.\n\n\n### Response\nThe JSON response will have the following fields:\n1. __orderNumber:__ The order's number\n2. __status:__ The order's status.\n3. __submittedAt:__ The timestamp of when the order was created.\n4. __waiter__: The waiter that submitted the order.\n5. __table:__ The ID of the table where the order was placed.\n6. ___food:__ An array of elements of type `food`.\n7. ___beverage:__ An array of elements of type `beverage`.\n\n\n### Errors\nThe following errors might be returned:\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Order not found:__ An order with the given ID was not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Order not found.\"`"
					},
					"response": []
				},
				{
					"name": "Update Order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"beverageCompleted\": true\n}"
						},
						"url": {
							"raw": "api/orders/:orderId",
							"host": [
								"api"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "",
									"description": "The ID of the order you wish to update"
								}
							]
						},
						"description": "## Description\nUpdates a single order. This endpoint provides a way to mark the beverages as prepared. If you wish to set the foods status you should update the single elements and the system will automatically move to the correct status.\nOnly user with role `bar` can use this endpoint.\n\n\n### Parameters\nThe following parameters are accepted:\n* __beverageCompleted__: A boolean that has to be true in order to set the beverageready status if the foods is still being prepared or completed if the food has been cooked already.\n\n\n### Response\nThe JSON response will be the updated order in case of success.\n\n\n### Socket.io Events\nThis endpoint emits the following events:\n* __order-status-changed__ - *Broadcasted to bar and cashier rooms* - Order status has changed. An object with the following properties will be passed along in the data field:\n\n\t* **id:** The order's id\n\t* **stauts:** The order's status at the moment\n\t* **previousStatus** The order's previous status.\n\n* __order-completed__ - *Broadcasted to cashier room and the order's waiter* - Order status is now completed. The orderId will be passed along in the data field.\n* __notification__ - *sent to the waiter that created the order* - The waiter has a new notification.\n\n\n### Errors\nThe following errors might be returned:\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Order not found:__ An order with the given ID was not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Order not found.\"`\n* __Table not found:__ A table with the given ID was not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Table not found.\"`\n* __Unexpected status:__ The status provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The status you provided is not valid.\"`\n* __Order completed:__ This order has been completed already.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"This order has been completed already.\"`\n* __Wrong role:__ The user have to be a bar in order to access this functionality.\n   \n   `{\"statusCode\": 401, \"error\": true, \"message\": \"A user with your role cannot access this feature.\"`"
					},
					"response": []
				},
				{
					"name": "Update element",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"preparation\"\n}"
						},
						"url": {
							"raw": "api/orders/:orderid/elements/:elementId",
							"host": [
								"api"
							],
							"path": [
								"orders",
								":orderid",
								"elements",
								":elementId"
							],
							"variable": [
								{
									"description": "The ID of the order you wish to update",
									"key": "orderid",
									"value": ""
								},
								{
									"description": "The ID of the element you wish to update",
									"key": "elementId",
									"value": ""
								}
							]
						},
						"description": "## Description\nUpdates a single order's element. This endpoint provides a way to change the foods status.\nOnly user with role `cook` can use this endpoint.\n\n\n### Parameters\nThe following parameters are accepted:\n* __status__: The new status of the element. It has to be one of the following:\n\n   * `waiting` - The element has still to be prepared\n   * `preparation` - A chef is cooking the element\n   * `completed` - The element is ready to be served\n\n\n### Response\nThe JSON response will be the updated order in case of success.\n\n\n### Socket.io Events\nThis endpoint emits the following events:\n* __order-status-changed__ - *Broadcasted to cook and cashier rooms* - Order status has changed. An object with the following properties will be passed along in the data field:\n\n\t* **id:** The order's id\n\t* **stauts:** The order's status at the moment\n\t* **previousStatus** The order's previous status.\n\n* __order-completed__ - *Broadcasted to cashier room and the order's waiter* - Order status is now completed. The orderId will be passed along in the data field.\n* __element-status-changed__ - *Broadcasted to cook room* - An element status has changed. An object with the following properties will be passed along in the data field:\n\t\n\t* **id:** The order's id\n\t* **status:** The order's status\n\t* **elementId:** The updated element id\n\t* **elementStatus:** The new status the element has.\n\n* __notification__ - *sent to the waiter that created the order* - The waiter has a new notification.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Order not found:__ An order with the given ID was not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Order not found.\"`\n* __User not found:__ A waiter with the given ID was not found. This means something is wrong with the order's `waiter` property.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"User not found.\"`\n* __Element not found:__ An element with the given ID was not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Element not found.\"`\n* __Table not found:__ A table with the given ID was not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Table not found.\"`\n* __Unexpected status:__ The status provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The status you provided is not valid.\"`\n* __Order completed:__ This order has been completed already.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"This order has been completed already.\"`\n* __Element completed:__ This element has been completed already.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"This element has been completed already.\"`\n* __Wrong role:__ The user have to be a bar in order to access this functionality.\n   \n   `{\"statusCode\": 401, \"error\": true, \"message\": \"A user with your role cannot access this feature.\"`"
					},
					"response": []
				}
			],
			"description": "Orders are always associated with a table and must have at least one element in them.\nAn order's status is handled by the system and will automatically get updated.\nFor example after a chef has cooked all the order's elements the status will switch to 'Food ready' and the associated waiter will be notified.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3702e768-7059-49d2-9069-947f07905596",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d24a6815-815b-47b3-a343-de47f9e020b3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tables",
			"item": [
				{
					"name": "List all tables",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "api/tables",
							"host": [
								"api"
							],
							"path": [
								"tables"
							]
						},
						"description": "## Description\nFetches a list of all the tables. Accept query filters based on the parameters tag and type.\n\n\n### Response\nThe JSON response will be an array of objects with the following fields:\n1. __tableNumber:__ The number that identify the table.\n2. __seats:__ The miaximum number of customers that can seat.\n3. __free:__ A boolean that defines if the table is free or occupied.\n4. __waiter:__ The id of the waiter that is assigned to the table. Only available if the table is occupied.\n5. __occupiedAt:__ A timestamp representing when the table was occupied. Only available if the table is occupied.\n6. ___orders:__ A list of all order ids that were added to this table. Only available if the table is occupied.\n7. ___customers:__ The number of customers that are currently seated. Only available if the table is occupied."
					},
					"response": []
				},
				{
					"name": "Single table",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/tables/:tableID",
							"host": [
								"api"
							],
							"path": [
								"tables",
								":tableID"
							],
							"variable": [
								{
									"key": "tableID",
									"value": "",
									"description": "The ID of the table we wish to fetch"
								}
							]
						},
						"description": "## Description\nRetrieve a single table information.\n\n\n### Response\nThe JSON response will have the following fields:\n1. __tableNumber:__ The number that identify the table.\n2. __seats:__ The miaximum number of customers that can seat.\n3. __free:__ A boolean that defines if the table is free or occupied.\n4. __waiter:__ The id of the waiter that is assigned to the table. Only available if the table is occupied.\n5. __occupiedAt:__ A timestamp representing when the table was occupied. Only available if the table is occupied.\n6. ___orders:__ A list of all order ids that were added to this table. Only available if the table is occupied.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Table not found:__ A table with such ID doesn't exist.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Table not found.\"`\n"
					},
					"response": []
				},
				{
					"name": "Table's order list",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "api/tables/:tableID/orders?status=preparation",
							"host": [
								"api"
							],
							"path": [
								"tables",
								":tableID",
								"orders"
							],
							"query": [
								{
									"key": "status",
									"value": "preparation",
									"description": "The status of the orders you wish to retrieve"
								}
							],
							"variable": [
								{
									"key": "tableID",
									"value": "",
									"description": "The ID of the table we wish to fetch"
								}
							]
						},
						"description": "## Description\nRetrieve the order list of a table. A query parameter can be added to retrieve only order on a specific status.\nThe Elements of the order will be sorted by their preparation time, in ascending order.\n\n\n### Query\nThe results might be filtered using the following query parameter:\n1. __status:__ The status of the orders you wish to retrieve. Could be `preparation`, `beverageready`, `foodready`, `completed`.\n\n\n### Response\nThe JSON response will have the following fields:\n1. __orderNumber:__ The number that identifies the order.\n2. __status:__ The order's status.\n3. __submittedAt:__ The timestamp of when the order was submitted.\n4. __waiter:__ The id of the waiter that made the order.\n5. __table:__ The id of the table this order is assigned to.\n6. __food:__ A list of all elements of type food.\n7. __beverage:__ A list of all elements of type beverage.\n\n\n### Errors\nThe following errors might be returned:\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Table not found:__ A table with such ID doesn't exist.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Table not found.\"`\n* __Wrong Query:__ The query parameters were not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The query parameters are not valid.\"`\n* __Table free:__ The table is free and can't have any orders.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Table occupied.\"`"
					},
					"response": []
				},
				{
					"name": "Table's notifications list",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "api/tables/:tableID/notifications",
							"host": [
								"api"
							],
							"path": [
								"tables",
								":tableID",
								"notifications"
							],
							"variable": [
								{
									"description": "The ID of the table we wish to fetch",
									"key": "tableID",
									"value": ""
								}
							]
						},
						"description": "## Description\nRetrieve the notifications list of a table.\n\n\n### Response\nThe JSON response will be an array of object with the following fields:\n1. __orderNumber:__ The number that identifies the order.\n2. __table:__ The table's id.\n3. __tableNumber:__ The number that identifies the table.\n4. __bar:__ A boolean that specifies if the notification is for the bar (true) or the kitchen (false).\n5. __waiter:__ The id of the waiter to whom the notification is assigned.\n6. __message:__ An optional message for the notification.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n"
					},
					"response": []
				},
				{
					"name": "Create a new table",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"number\": 1,\n\t\"seats\": 6\n}"
						},
						"url": {
							"raw": "api/tables",
							"host": [
								"api"
							],
							"path": [
								"tables"
							]
						},
						"description": "## Description\nSimply create a new table. This enpoint is used just for dev reasons and will prob added later as an admin feature.\nThis endpoint is accesible to admins only.\n\n\n### Parameters\nThe following parameters are accepted:\n* __tableNumber:__ The number of the table. Is **unique** so 2 tables with the same number are not accepted.\n* __seats:__ The maximum number of customers that can seat at the table.\n\n\n### Response\nThe JSON response will contain the newly created table in case of success. An _id property is going to be automatically added.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n   \n\n\n"
					},
					"response": []
				},
				{
					"name": "Add a new order to the table",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"food\": [{\"quantity\": 1, \"item\": \"food item ID\"}, {\"quantity\": 3, \"item\": \"food Item ID\"}],\n\t\"beverage\": [{\"quantity\": 2, \"item\": \"beverage item ID\"}]\n}"
						},
						"url": {
							"raw": "api/tables/:tableID/orders",
							"host": [
								"api"
							],
							"path": [
								"tables",
								":tableID",
								"orders"
							],
							"variable": [
								{
									"key": "tableID",
									"value": "",
									"description": "The id of the table where you want to place an order"
								}
							]
						},
						"description": "## Description\nAdd a new order to the table. \nThis endpoint is accessible to waiters only.\n\n\n### Parameters\nThe following parameters are accepted:\n* __food:__ An array of elements with the following properties:\n\n   * `quantity` The number of element ordered\n   * `item` The ID of the item ordered. **The item must be of type *food***\n   * `extra` *- optional -* An array of IDs of item with type *extra*\n   * `note` *- optional -* A note for the element (eg. guest wants a carbonara made with guanciale and not bacon!)\t\n* __beverage:__ An array of elements with the following properties:\n\n   * `quantity` The number of element ordered\n   * `item` The ID of the item ordered. **The item must be of type **beverage***\n#### Mind that an order with both beverage and food arrays empty is not considered valid but they are not required to be both with elements. This means you can place an order with only foods or drinks.\n\n### Response\nThe JSON response will contain the newly created order in case of success.\n\n\n### Socket.io Events\nThis endpoint emits the following event:\n* __order-added__ - *Broadcasted to cook and bar rooms depending on the status of the order* - A new order has been added. The tableId will be passed along in the data field. If the order does not contain any food elements or beverages cook and bar room respectively won't receive any event.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Wrong role:__ The user have to be a waiter in order to access this functionality.\n   \n   `{\"statusCode\": 401, \"error\": true, \"message\": \"A user with your role cannot access this feature.\"`\n* __Table not found:__ A table with such ID doesn't exist.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Table not found.\"`\n* __Table free:__ The table is free already.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The table is free.\"`\n* __Not food:__ One of the elements in the food array is not of type food.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"A food element is required.\"`\n* __Not beverage:__ One of the elements in the beverage array is not of type beverage.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"A beverage element is required.\"`\n\n\n\n"
					},
					"response": []
				},
				{
					"name": "Occupy table",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"customers\": 4\n}"
						},
						"url": {
							"raw": "api/tables/:tableID/occupy",
							"host": [
								"api"
							],
							"path": [
								"tables",
								":tableID",
								"occupy"
							],
							"variable": [
								{
									"description": "The ID of the table you wish to set as occupied",
									"key": "tableID",
									"value": ""
								}
							]
						},
						"description": "## Description\nSet a table as occupied and accomodates the guests. Only waiters can use this endpoint. \n\n\n### Parameters\nThe following parameter is required:\n* __customers__: The number of customers that are going to seat. This value have to be smaller or equals to the table `seats` property. This means a waiter can not accomodate 4 guests in a 2 seats table :)\n\n### Response\nThe JSON response will contain the updated table in case of success.\n\n\n### Socket.io Events\nThis endpoint emits the following event:\n* __table-status-changed__ - *Broadcasted to waiter and cashier rooms* - The status of the table has been modified. The table ID is passed along in the data field.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Table not found:__ A table with such ID doesn't exist.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Table not found.\"`\n* __Wrong role:__ The user have to be a waiter in order to access this functionality.\n   \n   `{\"statusCode\": 401, \"error\": true, \"message\": \"A user with your role cannot access this feature.\"`\n* __Table occupied:__ The table is occupied already.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The table is occupied.\"`\n\n\n"
					},
					"response": []
				},
				{
					"name": "Free table",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "api/tables/:tableID/free",
							"host": [
								"api"
							],
							"path": [
								"tables",
								":tableID",
								"free"
							],
							"variable": [
								{
									"key": "tableID",
									"value": "",
									"description": "The ID of the table you wish to set as free"
								}
							]
						},
						"description": "## Description\nCheckout a table, printing the bill and saving the users statistics. Only cashiers can use this endpoint. **Please mind that all associated orders that are not completed will be deleted**\n\n\n### Response\nThe JSON response will contain the updated table in case of success.\n\n\n### Socket.io Events\nThis endpoint emits the following events:\n* __table-status-changed__ - *Broadcasted* - The status of the table has been modified. The table ID is passed along in the data field.\n* __order-checkedout__ - *Broadcasted to the room cashier* - An order has changed its status to checkedout. The order id is passed along.\n* __order-deleted__ - *Broadcasted to the room cashier* - An order that was not completed has been deleted after the checkout procedure. An object with the following properties is passed along in the data field:\n\n\t* **id:** The id of the deleted order\n\t* **status:** The status of the order when it was deleted\n\n* __statistic-updated__ - *Broadcasted to the room cashier* - A statistic has been updated. The user id to whom the stats are associated is passed along in the data field.\n* __table-notifications-deleted__ - *sent to the table waiterr* - This table notifications have been deleted. The table id is passed along in the data field.\n\n\n### Errors\nThe following errors might be returned:\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Table not found:__ A table with such ID doesn't exist.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Table not found.\"`\n* __Table free:__ The table is free already.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"The table is free.\"`\n* __User not found:__ The waiter associated with this order is not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"User not found.\"`\n\n"
					},
					"response": []
				}
			],
			"description": "Tables are the building blocks of the system.\nIn order to accomplish almost all operations a table is required.\nOnly users with admin privileges (like cashiers) can free and thus checkout a table.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d00cc55c-4d9b-48df-b5ef-144190f6484b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5441052c-1eb0-4e04-9952-b3e49d38af7f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Single Notification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/notifications/:notificationId",
							"host": [
								"api"
							],
							"path": [
								"notifications",
								":notificationId"
							],
							"variable": [
								{
									"key": "notificationId",
									"value": "",
									"description": "The id of the notificaton you wish to retrieve"
								}
							]
						},
						"description": "## Description\nRetrieve a notification from the system.\n\n\n### Response\nThe JSON response will contain a notification object with the following fields:\n1. __orderNumber:__ The number that identifies the order.\n2. __table:__ The table's id.\n3. __tableNumber:__ The number that identifies the table.\n4. __bar:__ A boolean that specifies if the notification is for the bar (true) or the kitchen (false).\n5. __waiter:__ The id of the waiter to whom the notification is assigned.\n6. __message:__ An optional message for the notification.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`\n* __Notification not found:__ A notification with the given ID was not found.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Notification not found.\"`\n* __Notification not yours:__ You can only access your own notifications.\n   \n   `{\"statusCode\": 401, \"error\": true, \"message\": \"You can access only your notifications\"`"
					},
					"response": []
				},
				{
					"name": "Read notification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "api/notifications/:notificationId",
							"host": [
								"api"
							],
							"path": [
								"notifications",
								":notificationId"
							],
							"variable": [
								{
									"key": "notificationId",
									"value": "",
									"description": "The id of the notificaton you wish to delete"
								}
							]
						},
						"description": "## Description\nMark the notification as read and thus it deletes it from the system.\n\n\n### Response\nThe JSON response will contain the deleted notification.\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Invalid ID:__ The ID provided is not valid.\n   \n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Invalid ID.\"`"
					},
					"response": []
				},
				{
					"name": "All Notifications",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{John Doe Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/notifications",
							"host": [
								"api"
							],
							"path": [
								"notifications"
							]
						},
						"description": "## Description\nRetrieve all notifications associated with the user that has sent the request.\n\n\n### Response\nThe JSON response will contain a notifications array. The objects will have the following fields:\n1. __orderNumber:__ The number that identifies the order.\n2. __table:__ The table's id.\n3. __tableNumber:__ The number that identifies the table.\n4. __bar:__ A boolean that specifies if the notification is for the bar (true) or the kitchen (false).\n5. __waiter:__ The id of the waiter to whom the notification is assigned.\n6. __message:__ An optional message for the notification.\n"
					},
					"response": []
				}
			],
			"description": "A notification is generated when an order status changes. This is used to wait for a user acknowledgment and to show the correct status of the table even if the user is disconnected.\nThe notification can be eliminated once the user's read it."
		},
		{
			"name": "Statistics",
			"item": [
				{
					"name": "Single user's statistics",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/statistics/:userId",
							"host": [
								"api"
							],
							"path": [
								"statistics",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": ""
								}
							]
						},
						"description": "## Description\nThis is used to fetch a user's personal statistics. Based on the role different statistics are returned.\n\n\n### Response\nThe JSON response may have a bunch of different fields, depending on the user's role:\n1. __tags:__ - **Cook only** - The percentages of dish types prepared based upon tags. It's an array of objects having the following properties:\n\t* **tag:** The tag of the recipe represented as a string\n\t* **occurences:** The number of times a recipe with this tag has been prepared.\n2. __dishesPrepared:__ - **Cook only** - The number of dishes that have been cooked since the user's registration.\n3. __customersServed:__ - **Waiter only** - THe number of customers that have been served by the waiter since its registration.\n4. __customersHistory:\"__ - **Waiter only** - An orray of objects representing the number of customers served each day the waiter has been active. The objects have the following properies\n\t* **date:** a string date\n\t* **customers:** the number of customers served on the specific date\n\n\n### Errors\nThe following errors might be returned:\n* __Incomplete request:__ One of the parameters was not provided.\n\n   `{\"statusCode\": 400, \"error\": true, \"message\": \"Missing parameters.\"`\n* __Statistics Not Found:__ The username hasn't any statistics.\n   \n   `{\"statusCode\": 404, \"error\": true, \"message\": \"Statistics not found\"`\n   \n\n\n"
					},
					"response": []
				},
				{
					"name": "List all statiscs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "api/statistics",
							"host": [
								"api"
							],
							"path": [
								"statistics"
							]
						},
						"description": "## Description\nThis is used to fetch all users' personal statistics. Based on the role different statistics are returned.\n\n\n### Response\nThe JSON response is an array of statistics which may have a bunch of different fields, depending on the user's role:\n1. __tags:__ - **Cook only** - The percentages of dish types prepared based upon tags. It's an array of objects having the following properties:\n\t* **tag:** The tag of the recipe represented as a string\n\t* **occurences:** The number of times a recipe with this tag has been prepared.\n2. __dishesPrepared:__ - **Cook only** - The number of dishes that have been cooked since the user's registration.\n3. __customersServed:__ - **Waiter only** - THe number of customers that have been served by the waiter since its registration.\n4. __customersHistory:\"__ - **Waiter only** - An orray of objects representing the number of customers served each day the waiter has been active. The objects have the following properies\n\t* **date:** a string date\n\t* **customers:** the number of customers served on the specific date\n"
					},
					"response": []
				}
			],
			"description": "A collection of statistical data about the users.\nOnly users with admin privileges may retrieve sensible data.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "953eeade-02b0-4ec6-b07d-4edf1c58ecfd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bd99dee4-0690-406e-9300-88e3d901d3a2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}